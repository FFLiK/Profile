projects = [
    {
        "title" : "Zombie Game",
        "date" : "2024.7",
        "summary" : "KAIST 2025년 후기 새내기 새로배움터 첫 번째 프로그램에서 활용된 좀비 게임 시뮬레이션 프로그램",
        "description" : """
            작성중
        """,
        "tag" : ["C++", "SDL2"],
        "github" : "https://github.com/FFLiK-Archive/ZombieGame",
        "icon" : ""
    },
    {
        "title" : "Hand Simulator",
        "date" : "2024.1 - 2024.12",
        "summary" : "사실적으로 손의 움직임을 시뮬레이팅 할 수 있는 프로그램",
        "description" : """
            DH-Parameter를 활용한 행렬 연산으로 관절의 각도에 기반한 손의 3차원적 구조를 생성하였으며,
            손 해부학에 기반한 뼈의 길이, 관절의 제약조건, 그리고 근육의 구성에 기반한 손 모델을 제작하여
            근육의 움직임에 따른 손의 형태를 시뮬레이팅할 수 있습니다.
            또한, 경사 하강법 등 최적화 기법을 활용하여 손가락 말단의 위치가 주어졌을 때
            각 근육에 가해져야 하는 힘을 최적화하여 자연스러운 손의 모션을 생성하는 기능을 포함하고 있습니다.<br>
            <small>이 프로젝트는 2024년도 한국과학영재학교 졸업연구 프로그램 중 하나로 수행되었습니다.</small>
        """,
        "tag" : ["C++", "SDL2", "Linear Algebra", "DH-Parameter", "Hand Anatomy", "Optimization"],
        "github" : "https://github.com/FFLiK-Archive/HandSimulator",
        "icon" : "../res/projects/HandSim.png"
    },
    {
        "title" : "PlasAlpha / Plasmid Data Part Extraction System",
        "date" : "2023.8 - 2023.11 / 2024.2 - 진행 중",
        "summary" : "시퀀싱 결과를 토대로 재조합 플라스미드에 원하는 데이터가 제대로 들어갔는지 확인할 수 있는 프로그램",
        "description" : """
            플라스미드 서열과 데이터 서열, 그리고 활용한 제한 효소를 입력하면 이를 활용해 이상적인 재조합 플라스미드 서열을 계산하고,
            이를 시퀀싱 결과와 비교하여, 재조합 플라스미드에 원하는 데이터가 제대로 들어갔는지 확인하는 기능을 수행합니다.
            이를 시각적으로 나타내어 연구자가 간단하게 정확도를 확인할 수 있도록 하였으며, 수치적인 결과를 제공하여 객관적인 비교가 가능하도록 하였습니다. <br>
            두 서열을 비교하는 과정은 최소 편집 거리 알고리즘을 활용하였으며,
            이를 통해 단순한 염기 치환 뿐만 아니라, 염기 삽입과 삭제 가능성까지 고려해 두 서열 간의 유사성을 계산하여,
            플라스미드의 어떤 부분이 재조합 과정에서 변형되었는지 확인할 수 있도록 하였습니다.<br>
            <small>이 프로젝트는 현재 GUI 개발 및 다양한 상황에서의 확장성을 고려하여 재개발 중에 있습니다.</small>
        """,
        "tag" : ["C++", "Recombinant Plasmid", "Edit-Distance Algorithm", "Bioinformatics"],
        "download" : "",
        "github" : "https://github.com/FFLiK/PlasAlpha",
        "icon" : "../res/projects/PlasAlpha.png"
    },
    {
        "title" : "Flow",
        "date" : "2023.5 - 2023.11",
        "summary" : "로컬 파일 관리 시스템",
        "description" : """
            Git과 같이 파일을 관리할 수 있는 로컬 시스템 개발 프로젝트입니다. GUI 기반의 파일 관리 시스템을 제공합니다.
            사용자는 특정 파일 혹은 폴더를 지정하여 특정 시점 상태를 저장하고, 히스토리를 통해 변경 사항을 추적하여 특정 시점으로 자유롭게 돌아갈 수 있습니다.
            또한, 분기점을 설정하여 여러가지 버전을 동시에 관리하고 수정할 수 있으며, 안전한 분기 및 병합이 가능합니다. <br>
            이 시스템은 파일 메타데이터에 기반한 빠른 변경 사항 추적이 가능하며,
            XOR 연산을 통해 변화가 생긴 부분만을 압축하여 저장함으로써, 효율적으로 공간을 활용할 수 있습니다.
            이외에도 모든 활동이 JSON 파일에 기록되어 효율적인 시스템을 제공하며, 각 활동에 고유 UUID를 부여하여 안전한 파일 관리를 지원합니다. <br>
            <small>이 프로젝트는 2023학년도 한국과학영재학교 자료구조 프로젝트를 위해 진행되었습니다.</small>
        """,
        "tag" : ["C++", "PyQt6", "File Management", "Version Control", "Data Structure"],
        "download" : "https://github.com/FFLiK-Archive/Flow/releases",
        "github" : "https://github.com/FFLiK-Archive/Flow",
        "icon" : "../res/projects/Flow.png"
    },
    {
        "title" : "Sorting Visualizer",
        "date" : "2023.5 - 2023.7",
        "summary" : "정렬 알고리즘 시각화 프로그램",
        "description" : """
            17가지 정렬 알고리즘의 원리를 시각화한 프로그램입니다.
            사용자는 원하는 정렬 알고리즘을 선택하고, 원하는 크기의 배열을 생성하여 정렬 과정을 시각적으로 확인할 수 있습니다.
            그래프의 바와 적절한 색깔 처리를 통해 정렬 과정을 직관적으로 확인할 수 있으며,
            소리를 추가하여 정렬 과정을 더욱 생생하게 체험할 수 있습니다.
            사용자는 정렬 속도를 조절할 수 있어 상황에 따라 빠르게 혹은 천천히 정렬 과정을 확인할 수 있습니다.
            초기 데이터 역시 랜덤 데이터, 정렬된 데이터, 역순 데이터, 거의 정렬된 데이터 등 다양한 데이터를 제공하여 사용자가 원하는 상황을 선택할 수 있습니다. <br>
            이 프로그램을 개발하는 과정에서는 특히 객체 지향 프로그래밍 기법이 많이 쓰였습니다.
            다형성(Polymorphism)을 사용하여 하나의 함수로 다양한 정렬 알고리즘에 대해 각각 실행할 수 있도록 하였으며,
            추상화(Encapsulation)와 상속(inheritance) 기능을 효과적으로 사용하여
            보편적인 정렬 알고리즘 시뮬레이팅 클래스를 상속받아 각 알고리즘에 해당하는 클래스는 그 정렬 알고리즘만 구현하면 손쉽게 시뮬레이팅이 가능하도록 하였습니다.
            마지막으로 캡슐화(Encapsulation)을 적극적으로 활용하여 메인 코드의 복잡성을 낮추고 유지 보수가 손쉽도록 하였습니다.
        """,
        "tag" : ["Python", "PyQt6", "Sorting Algorithm", "Object-Oriented Programming"],
        "download" : "https://github.com/FFLiK-Archive/SortingVisualizer/releases",
        "github" : "https://github.com/FFLiK-Archive/SortingVisualizer",
        "icon" : "../res/projects/SortingVisualizer.png"
    },
    {
        "title" : "DNA Encoding System",
        "date" : "2023.4 - 2023.11",
        "summary" : "DNA Digital Data Storage System에 관한 연구를 위한 DNA Encoding 및 Decoding 프로그램",
        "description" : """
            DNA에 디지털 데이터를 저장하는 가장 간단한 방법은 2진법 4진법 교환을 통한 인코딩입니다.
            하지만 DNA는 매우 안정적인 분자임에도 불구하고 염기가 변형되거나 삽입/삭제될 가능성이 존재하며,
            이 외에도 연구 비용 및 시간을 고려했을 때 너무 많은 양의 DNA를 사용하는 것은 비효율적입니다.
            따라서 최소한의 염기 서열을 사용하면서도 안정적인 데이터 저장을 위한 인코딩 알고리즘을 개발하였습니다. <br>
            문제를 해결하기 위하여 데이터를 쪼개는 Fragmentation 과정을 수행한 후,
            각 조각에 대표적인 오류 정정 알고리즘인 RS(Reed-Solomon) 코드를 삽입하여 오류 정정을 수행하였습니다.
            또한, 안정적인 데이터 추출을 위하여 중복된 조각을 삽입하여,
            디코딩 과정에서 추출한 동일 조각 데이터들을 모아 최소 편집 거리 알고리즘을 활용해 그 차이를 분석하고,
            확률적 기법에 기반하여 여러 가능성의 서열을 생성해 최종적으로 데이터를 추출하였습니다.
            RS 코드 외에도 CRC 등 오류 검출 기법과 반복 서열을 통한 오류 정정 기법을 통합한 시스템을 구축하는 등
            데이터 특성에 따라 최고의 효율을 낼 수 있는 방법을 고안하였습니다.<br>
            용량을 절감하기 위해 문자는 커스텀 코드표를 제작해 필요로 하는 비트수를 최소화 하였으며,
            악보 데이터는 음표 별 데이터를 비트 단위로 인코딩하는 등 데이터의 특성에 따라 최적화된 압축 방법을 적용하였습니다.
            <br>
            <small>이 프로젝트는 2023년도 한국과학영재학교 R&E 프로그램 중 하나로 수행되었으며, 연구 보안을 위하여 코드를 비공개합니다.</small>
        """,
        "tag" : ["C++", "DNA Digital Data Storage", "DNA Encoding", "Error Correction", "Data Compression", "Bioinformatics"],
        "icon" : ""
    },
    {
        "title" : "ADOFAI MACRO",
        "date" : "2021.12 - 2024.7",
        "summary" : "불과 얼음의 춤 게임을 자동으로 플레이하는 매크로",
        "description" : """
        불과 얼음의 춤은 화면에 보이는 채보에 맞춰 플레이어가 키보드로 입력을 해야 하는 리듬 게임입니다.
        다른 리듬 게임과 다르게 이 게임은 아무 키를 입력해도 되므로, 난이도를 상승시키고자 갈수록 빠른 속도의 채보가 등장하였습니다.
        이로 인해 사람이 플레이 하는 것이 불가능하거나, 경이로운 실력을 요구하는 맵들이 등장하였으며,
        한 키를 누르는 것을 벗어나 여러 키를 조작해하는 상황으로 발전하였습니다.
        이 매크로는 모든 맵을 높은 정확도를 유지하며 자동으로 클리어 하는 것을 넘어,
        마치 사람이 플레이하는 것 처럼 키보드를 누르고 떼는 것을 목표로 제작되었으며, 지속적으로 발전되어왔습니다. <br>
        가능한 모든 것을 자동화 하기 위해 매크로는 맵 파일의 경로를 지정하면, Json 형식의 맵 파일을 읽어 박자를 분석하여
        자동으로 타이핑 스케줄을 작성합니다.
        타이핑 스케줄은 BPM에 기반하여 정박에 맞춰 손이 움직이도록 하였으며, 
        기준 손 속도를 정하여 손 속도와 현재 박자의 빠르기에 따라
        키를 누르는 손가락 수와 빠르기를 조절함으로써, 마치 사람이 음악에 맞추어 플레이하는 듯한 효과를 내었습니다. <br>
        실제 매크로가 작동할 시에는 게임 화면의 픽셀값을 불러와 시작을 자동으로 인식하여 플레이 되도록 함으로써,
        사용자의 개입이 없이 자동으로 게임을 플레이할 수 있도록 하였습니다.
        마지막으로 게임 플레이 시 성능을 최대화 하기 위하여 미리 계산된 키보드 입력 명령을 queue에 저장하여,
        접근 시 항상 O(1)의 시간 복잡도를 가지도록 하였으며, 플레이 전 사전 연산을 최대화하여 실제 작동시에 연산으로 인한 지연을 최소화 하였습니다.
        또한, 빠른 작동을 위하여 누르는 명령과 떼는 명령을 멀티 쓰레딩을 통해 병렬로 처리하였습니다. <br>
        마지막으로 사실적인 묘사를 위하여 매크로에서 직접 키를 누르는 효과음을 내도록 설정하였으며,
        Hand Simulator 프로젝트와 연계하여 키보드를 치는 손의 모습을 시뮬레이팅하였습니다. <br>
        <small>이 프로그램은 악용될 소지가 있어 프로그램 설치 및 소스코드 공개를 제한합니다. 대신 실제 작동 영상을 첨부합니다.</small>
        """,
        "tag" : ["C++", "Macro", "ADOFAI", "Optimization"],
        "open" : "../display/viewer.html?proj=adofai-macro",
        "icon" : "",
        "hidden" : "true"
    }
]